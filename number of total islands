class Solution {
public:
  void dfs(vector<vector<char>>& grid,int i,int j,vector<vector<bool>>&visited){
    if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || visited[i][j] || grid[i][j]=='0'){
        return ;
    }
    visited[i][j]=true;
        dfs(grid,i-1,j,visited); // up
        dfs(grid,i+1,j,visited);//down
        dfs(grid,i,j-1,visited);//left
        dfs(grid,i,j+1,visited);//right
    
  }
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty()){
            return 0;
        }
        int cnt=0;
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<bool>>visited(row,vector<bool>(col,false));
    for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
            if(!visited[i][j] && grid[i][j]=='1'){
            dfs(grid,i,j,visited);
            cnt++;
            }
        }
    }
    return cnt;

        
    }
};
